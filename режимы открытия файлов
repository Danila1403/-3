class Product:
    def __init__(self, name, weight, category):
        self.name = name
        self.weight = weight
        self.category = category

    def __str__(self):
        return f"{self.name}, {self.weight}, {self.category}"


class Shop:
    def __init__(self, file_name="products.txt"):
        self._file_name = file_name

    def get_products(self):
        try:
            with open(self._file_name, "r") as file:
                return file.read()
        except FileNotFoundError:
            return ""

    def add(self, *products):
        existing_products = {}
        # Чтение существующих данных
        try:
            with open(self._file_name, "r") as file:
                for line in file:
                    name, weight, category = line.strip().split(", ")
                    existing_products[name] = [float(weight), category]
        except FileNotFoundError:
            pass

        with open(self._file_name, "w") as file:
            for product in products:
                if product.name in existing_products:
                    # Если продукт уже есть, обновляем вес
                    existing_products[product.name][0] += product.weight
                    print(
                        f"Продукт {product.name} уже был в магазине, его общий вес теперь равен {existing_products[product.name][0]}"
                    )
                else:
                    # Если продукта нет, добавляем новый
                    existing_products[product.name] = [product.weight, product.category]

            # Записываем все продукты обратно в файл
            for name, (weight, category) in existing_products.items():
                file.write(f"{name}, {weight}, {category}\n")



s1 = Shop()
p1 = Product("Potato", 50.5, "Vegetables")
p2 = Product("Spaghetti", 3.4, "Groceries")
p3 = Product("Potato", 5.5, "Vegetables")

s1.add(p1, p2, p3)

print(s1.get_products())
